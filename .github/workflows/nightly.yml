name: "nightly"
on:
  push:
    branches:
      - main

jobs:
  check-changed-paths:
    runs-on: ubuntu-22.04
    outputs:
      changed: ${{ steps.changed-front.outputs.changed }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - uses: marceloprado/has-changed-path@v1.0.1
        id: changed-front
        with:
          paths: public src src-tauri static package.json .scripts .github

  create-release:
    needs: check-changed-paths
    if: needs.check-changed-paths.outputs.changed == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      package_version: ${{ env.PACKAGE_VERSION }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: get old nightly release id
        id: get-release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: "nightly",
                })
                return data.id
            } catch (error) {
              if (error.status === 404) {
                core.info(`Release nightly not found`)
              } else {
                throw error
              }
            }

      - name: delete old nightly release
        if: steps.get-release.outputs.result != ''
        run: gh release delete nightly --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "nightly",
              name: "Nightly build",
              draft: true,
              prerelease: true,
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - uses: oven-sh/setup-bun@v1

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install frontend dependencies
        run: bun i

      - uses: tauri-apps/tauri-action@v0
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    needs: [create-release, build-tauri]

    steps:
      - name: Get meaningful commit message
        id: get-commit-message
        run: |
          # 获取最后一次非合并提交消息
          LAST_COMMIT_MESSAGE=$(git log --pretty=format:"%s" -n 1 --skip=0 | grep -v "^Merge pull request")
          if [ -z "$LAST_COMMIT_MESSAGE" ]; then
            # 如果最新的提交是合并消息，则获取前一条提交
            LAST_COMMIT_MESSAGE=$(git log --pretty=format:"%s" -n 1 --skip=1)
          fi
          echo "LAST_COMMIT_MESSAGE=$LAST_COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
          PACKAGE_VERSION: ${{ needs.create-release.outputs.package_version }}
          LAST_COMMIT_MESSAGE: ${{ env.LAST_COMMIT_MESSAGE }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: parseInt(process.env.release_id),
              body: `> [!WARNING]\n> 每夜版可能无法自动升级。/The nightly version may not auto-update.\n\n## Last Commit\n\n${process.env.LAST_COMMIT_MESSAGE}`,
              draft: false
            })
